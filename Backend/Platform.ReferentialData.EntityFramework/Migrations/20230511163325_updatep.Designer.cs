// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using login.data.PostgresConn;

#nullable disable

namespace Platform.ReferentialData.EntityFramework.Migrations
{
    [DbContext(typeof(Postgres))]
    [Migration("20230511163325_updatep")]
    partial class updatep
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Platform.ReferencialData.WebAPI.Controllers.Authentification.ResetPassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("InsertDateTimeUTC")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OTP")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.HasKey("Id");

                    b.ToTable("ResetPassword");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.Authentification.Cassier", b =>
                {
                    b.Property<string>("CasierId")
                        .HasColumnType("text");

                    b.Property<string>("adresse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("balance")
                        .HasColumnType("double precision");

                    b.Property<string>("cassierId")
                        .HasColumnType("text");

                    b.Property<string>("employerId")
                        .HasColumnType("text");

                    b.Property<string>("moreInfoId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CasierId");

                    b.HasIndex("cassierId");

                    b.HasIndex("employerId");

                    b.ToTable("Cassier");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.Authentification.Categorie", b =>
                {
                    b.Property<string>("IdCategorie")
                        .HasColumnType("text");

                    b.Property<string>("NameCateforie")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("idticket")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdCategorie");

                    b.HasIndex("idticket")
                        .IsUnique();

                    b.ToTable("categorie");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.Authentification.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Employeeid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Chat");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.Authentification.Employee", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasColumnType("text");

                    b.Property<string>("CassierCasierId")
                        .HasColumnType("text");

                    b.Property<string>("NumTel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("balance")
                        .HasColumnType("double precision");

                    b.Property<string>("moreInfoId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EmployeeId");

                    b.HasIndex("CassierCasierId");

                    b.HasIndex("moreInfoId")
                        .IsUnique();

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.Authentification.Employeebalancehistrique", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<double>("balancegiven")
                        .HasColumnType("double precision");

                    b.Property<DateTimeOffset>("datecreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("employeeid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("employerid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Employeebalancehistrique");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.Authentification.Employment", b =>
                {
                    b.Property<string>("IdEmployee")
                        .HasColumnType("text");

                    b.Property<string>("IdEmployer")
                        .HasColumnType("text");

                    b.Property<string>("IdCategorie")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdEmployee", "IdEmployer");

                    b.HasIndex("IdCategorie");

                    b.HasIndex("IdEmployer");

                    b.ToTable("Employement");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.Authentification.Ticket", b =>
                {
                    b.Property<string>("IdTicket")
                        .HasColumnType("text");

                    b.Property<string>("nameTicket")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("prixTicket")
                        .HasColumnType("integer");

                    b.HasKey("IdTicket");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.Authentification.Transactions", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Cashierid")
                        .HasColumnType("text");

                    b.Property<string>("Employeeid")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("datecreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("isScanned")
                        .HasColumnType("integer");

                    b.Property<double>("prix")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.Authentification.shopownerHistorique", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<double>("balancetaken")
                        .HasColumnType("double precision");

                    b.Property<string>("cashierid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("shopownerid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("shopownerHistorique");
                });

            modelBuilder.Entity("Platform.ReferentialData.DtoModel.Authentification.EmployeeDto", b =>
                {
                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NumTel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("balance")
                        .HasColumnType("double precision");

                    b.ToTable("EmployeeDtos");
                });

            modelBuilder.Entity("WebApplication1.models.ShopOwner", b =>
                {
                    b.Property<string>("ShopOwnerIdMoreInfo")
                        .HasColumnType("text");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NumTel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentMethode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("adresseFacturation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("balance")
                        .HasColumnType("double precision");

                    b.Property<string>("codeTVA")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("moreInfoId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ShopOwnerIdMoreInfo");

                    b.HasIndex("moreInfoId")
                        .IsUnique();

                    b.ToTable("Shopowner");
                });

            modelBuilder.Entity("login.models.MoreInfoEmployer", b =>
                {
                    b.Property<string>("IdMoreInfo")
                        .HasColumnType("text");

                    b.Property<string>("AdresseEntreprise")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmailRH")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NumTelRH")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentMethode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("adresseFacturation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("codeTVA")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("moreInfoId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("numeroTelEntreprise")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdMoreInfo");

                    b.HasIndex("moreInfoId")
                        .IsUnique();

                    b.ToTable("MoreInfoEmployer");
                });

            modelBuilder.Entity("login.models.RefreshTokenModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RefreshTokenTable");
                });

            modelBuilder.Entity("login.models.employer3", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("login.models.employer3", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("login.models.employer3", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("login.models.employer3", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("login.models.employer3", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.Authentification.Cassier", b =>
                {
                    b.HasOne("login.models.employer3", "cassier")
                        .WithMany()
                        .HasForeignKey("cassierId");

                    b.HasOne("login.models.employer3", "employer")
                        .WithMany()
                        .HasForeignKey("employerId");

                    b.Navigation("cassier");

                    b.Navigation("employer");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.Authentification.Categorie", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.Authentification.Ticket", "ticket")
                        .WithOne("categorie")
                        .HasForeignKey("Platform.ReferentialData.DataModel.Authentification.Categorie", "idticket")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ticket");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.Authentification.Employee", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.Authentification.Cassier", null)
                        .WithMany("employee")
                        .HasForeignKey("CassierCasierId");

                    b.HasOne("login.models.employer3", "employer")
                        .WithOne("EmployeeId")
                        .HasForeignKey("Platform.ReferentialData.DataModel.Authentification.Employee", "moreInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Fk_USER_Employee");

                    b.Navigation("employer");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.Authentification.Employment", b =>
                {
                    b.HasOne("Platform.ReferentialData.DataModel.Authentification.Categorie", "Categorie")
                        .WithMany("Employment")
                        .HasForeignKey("IdCategorie")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Platform.ReferentialData.DataModel.Authentification.Employee", "employee")
                        .WithMany("employment")
                        .HasForeignKey("IdEmployee")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("login.models.MoreInfoEmployer", "employer")
                        .WithMany("employment")
                        .HasForeignKey("IdEmployer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categorie");

                    b.Navigation("employee");

                    b.Navigation("employer");
                });

            modelBuilder.Entity("WebApplication1.models.ShopOwner", b =>
                {
                    b.HasOne("login.models.employer3", "employer")
                        .WithOne("ShopOwnerMoreInfo")
                        .HasForeignKey("WebApplication1.models.ShopOwner", "moreInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Fk_USER_ShopMoreInfo");

                    b.Navigation("employer");
                });

            modelBuilder.Entity("login.models.MoreInfoEmployer", b =>
                {
                    b.HasOne("login.models.employer3", "employer")
                        .WithOne("moreInfo")
                        .HasForeignKey("login.models.MoreInfoEmployer", "moreInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("Fk_USER_MoreInfo");

                    b.Navigation("employer");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.Authentification.Cassier", b =>
                {
                    b.Navigation("employee");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.Authentification.Categorie", b =>
                {
                    b.Navigation("Employment");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.Authentification.Employee", b =>
                {
                    b.Navigation("employment");
                });

            modelBuilder.Entity("Platform.ReferentialData.DataModel.Authentification.Ticket", b =>
                {
                    b.Navigation("categorie")
                        .IsRequired();
                });

            modelBuilder.Entity("login.models.MoreInfoEmployer", b =>
                {
                    b.Navigation("employment");
                });

            modelBuilder.Entity("login.models.employer3", b =>
                {
                    b.Navigation("EmployeeId")
                        .IsRequired();

                    b.Navigation("ShopOwnerMoreInfo")
                        .IsRequired();

                    b.Navigation("moreInfo")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
